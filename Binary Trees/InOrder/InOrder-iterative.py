# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

from collections import deque
class Solution:
    def inorderTraversal(self, root):
      # Left - Root - Right 
      op = []
      # Instead of using the stack generated by recursive function call , we customise a stack acc to our req in the 
      # iterative approach 
      stack = deque()
     # curr -> root
      curr = root
     # Once the stack is empty ,there is no element left to append , op is generated
      while stack or curr:
          if curr:
              # LEFT
              # Keep appending the left values until we encounter a left null node 
              stack.append(curr)
              curr = curr.left
          else:
              # Once null is encountered , print the top of stack 
              # ROOT
              curr = stack.pop()
              op.append(curr.val)
              # RIGHT
              curr = curr.right
      return op
  
  
# TC : O(N)
# SC : O(N)